function [fname, Cfname] = mci_interp2struct(MAPfile, volumes, structFile, out_path)
% mci_interp2struct() - Interpolates the functional data to the structural (underlay) dimensions.
%  
% Usage: >> fnames = mci_interp2struct(MAPfile, volumes, structFile, out_path);
%   
% INPUTS:
% MAPfile    = Functional data filename, should be .nii 
% volumes    = volumes of MAPfile to interpolate (typically the components of interest)
% structFile = Structural data filename, also .nii 
% out_path   = path to save interpolated files
%
% OUTPUTS:
% fname      = filenames of the interpolated maps.  Same name as input file with an 'i' prefix.
% Cfname     = filename of the interpolated map coordinates.
%
% See also: mci_makeimage()

[dpath, dname, dext] = fileparts(MAPfile);

if nargin < 4
    out_path = dpath;
end
       
%% load in the structural info
[structuralImage, structHInfo] = icatb_loadData(structFile);
structVol = structHInfo.V(1);

%% interpolate
%[structuralImage, icasig, coords] = icatb_returnResizedImage(structFile, MAPfile,  'axial', [], 'real', [], volumes);
[Fimages, coords, HInfo, slices, text_left_right] = icatb_resizeImage(structVol, MAPfile, 'axial', [], volumes, []);
Fimages = Fimages(2:end,:,:,:);
Fimages = permute(Fimages, [2 3 4 1]);

%% Save the coordinates in .mat format
C = mci_simplify_coords(coords);
Cfname = fullfile(out_path, ['i' dname '_coords.mat']);
fprintf('Saving interpolated coordinates to %s...\n', Cfname)
save(Cfname, 'C');

%% Save the interpolated data in nifti format
fname = fullfile(out_path, ['i' dname '.nii']);

    fprintf('Saving interpolated data to %s...\n new dimensions [%d x %d x %d]\n', fnames, Fimages(map,1), Fimages(map,2), Fimages(map,3))

end

